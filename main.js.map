{"version":3,"file":"main.js","mappings":"yBAEe,MAAMA,EACjBC,WAAAA,CAAYC,GACRC,KAAKD,OAASA,CAClB,CAEAE,MAAAA,GACI,MAAMC,EAAYC,SAASC,cAAc,OAGzC,OAFAF,EAAUG,UAAUC,IAAI,SAEjBJ,CACX,ECVW,MAAMK,EACjBT,WAAAA,CAAYU,GACRR,KAAKQ,OAASA,CAClB,CAEAP,MAAAA,GACI,MAAMQ,EAASN,SAASC,cAAc,OACtCK,EAAOJ,UAAUC,IAAI,UAErB,MAAME,EAASL,SAASC,cAAc,MAMtC,OALAI,EAAOH,UAAUC,IAAI,eACrBE,EAAOE,YAAcV,KAAKQ,OAE1BC,EAAOE,YAAYH,GAEZC,CACX,EChBW,MAAMG,EACjBd,WAAAA,CAAYe,GACRb,KAAKa,KAAOA,CAChB,CAEAZ,MAAAA,GACI,MAAMa,EAAWX,SAASC,cAAc,OACxCU,EAAST,UAAUC,IAAI,QAEvB,MAAMS,EAAWZ,SAASC,cAAc,KACxCW,EAASV,UAAUC,IAAI,aACvBS,EAASL,YAAcV,KAAKa,KAC5BC,EAASH,YAAYI,GAErB,MAAMC,EAAeb,SAASC,cAAc,OAK5C,OAJAY,EAAaX,UAAUC,IAAI,aAAc,YACzCU,EAAaC,UAAa,UAC1BH,EAASH,YAAYK,GAEdF,CACX,CAEAI,UAAAA,CAAWC,GACcA,EAAEC,OAAOC,cAAc,eAC/BhB,UAAUiB,OAAO,WAClC,CAEAC,UAAAA,CAAWJ,GACcA,EAAEC,OAAOC,cAAc,eAC/BhB,UAAUC,IAAI,WAC/B,EC9BW,MAAMkB,EACjB1B,WAAAA,CAAYC,GACRC,KAAKD,OAASA,CAClB,CAEAE,MAAAA,GACI,MAAMwB,EAAUtB,SAASC,cAAc,QACvCqB,EAAQpB,UAAUC,IAAI,iBAEtB,MAAMoB,EAAWvB,SAASC,cAAc,YACxCsB,EAASrB,UAAUC,IAAI,iBAAkB,YACzCoB,EAASC,YAAc,iCACvBF,EAAQd,YAAYe,GACpB1B,KAAK4B,MAAQF,EAEb,MAAMG,EAAiB1B,SAASC,cAAc,OAC9CyB,EAAexB,UAAUC,IAAI,kBAAmB,YAChDmB,EAAQd,YAAYkB,GAEpB,MAAMC,EAAY3B,SAASC,cAAc,UACzC0B,EAAUzB,UAAUC,IAAI,kBAAmB,YAC3CwB,EAAUC,KAAO,SACjBD,EAAUpB,YAAc,WACxBmB,EAAelB,YAAYmB,GAE3B,MAAME,EAAe7B,SAASC,cAAc,UAC5C4B,EAAa3B,UAAUC,IAAI,gBAAiB,YAC5C0B,EAAaD,KAAO,SACpBC,EAAaf,UAAa,UAC1BY,EAAelB,YAAYqB,GAE3B,MAAMC,EAAS9B,SAASC,cAAc,UAQtC,OAPA6B,EAAO5B,UAAUC,IAAI,2BACrB2B,EAAOF,KAAO,SACdE,EAAOvB,YAAc,mBACrBe,EAAQd,YAAYsB,GAEpBjC,KAAKD,OAAOY,YAAYc,GAEjBA,CACX,CAEA,gBAAOS,CAAUnC,GACgBA,EAAOsB,cAAc,4BAC7BhB,UAAUC,IAAI,YAErBP,EAAOsB,cAAc,mBAC7BhB,UAAUiB,OAAO,YAEAvB,EAAOsB,cAAc,oBAC7BhB,UAAUiB,OAAO,YAEVvB,EAAOsB,cAAc,oBAC7BhB,UAAUiB,OAAO,YAEVvB,EAAOsB,cAAc,kBAC7BhB,UAAUiB,OAAO,WAClC,CAEA,YAAOM,CAAM7B,GACT,OAAOA,EAAOsB,cAAc,mBAAmBc,KACnD,CAEA,aAAOC,CAAOrC,GACmBA,EAAOsB,cAAc,4BAC7BhB,UAAUiB,OAAO,YAEtC,MAAMM,EAAQ7B,EAAOsB,cAAc,mBACnCO,EAAMO,MAAQ,GACdP,EAAMvB,UAAUC,IAAI,YAEGP,EAAOsB,cAAc,oBAC7BhB,UAAUC,IAAI,YAEPP,EAAOsB,cAAc,oBAC7BhB,UAAUC,IAAI,YAEPP,EAAOsB,cAAc,kBAC7BhB,UAAUC,IAAI,WAC/B,E,6YCjFW,MAAM+B,EAEjB,WAAOC,CAAKC,GACRC,aAAaC,QAAQ,aAAcC,KAAKC,UAAUJ,GACtD,CAEA,WAAOK,GACH,IACI,OAAOF,KAAKG,MAAML,aAAaM,QAAQ,cAC3C,CAAE,MAAO3B,GACL,MAAM,IAAI4B,MAAM,gBACpB,CACJ,ECZW,MAAMC,EACjBlD,WAAAA,GACIE,KAAKiD,KAAO,GACZjD,KAAKkD,WAAa,GAClBlD,KAAKmD,KAAO,EAChB,CAEA,WAAOC,CAAKC,GACR,MAAMd,EAAa,IAAIS,EAKvB,OAJAT,EAAWU,KAAOI,EAAOJ,KACzBV,EAAWW,WAAaG,EAAOH,WAC/BX,EAAWY,KAAOE,EAAOF,KAElBZ,CACX,ECTW,MAAMe,EACjBxD,WAAAA,GACIE,KAAKuD,cAAgB,KACrBvD,KAAKwD,eAAiB,KACtBxD,KAAKyD,OAAS,KACdzD,KAAK0D,cAAgB,CAAC,EACtB1D,KAAK2D,SAAW,GAEhB3D,KAAKuC,WAAa,IAAIS,EAEtBhD,KAAK4D,YAAc5D,KAAK4D,YAAYC,KAAK7D,MACzCA,KAAK8D,YAAc9D,KAAK8D,YAAYD,KAAK7D,MACzCA,KAAK+D,UAAY/D,KAAK+D,UAAUF,KAAK7D,KACzC,CAEA8D,YAAe3C,IACNnB,KAAKuD,gBAINvD,KAAKyD,QACLzD,KAAKyD,OAAOnC,SAGhBtB,KAAKgE,cAAchE,KAAKyD,OAAQtC,EAAE8C,QAAS9C,EAAE+C,SAE7ClE,KAAKwD,eAAeW,MAAMC,IAAMjD,EAAE+C,QAAUlE,KAAK0D,cAAcW,EAAI,KACnErE,KAAKwD,eAAeW,MAAMG,KAAOnD,EAAE8C,QAAUjE,KAAK0D,cAAca,EAAI,KAAI,EAI5ER,UAAa5C,IACT,IAAKnB,KAAKwD,eACN,OAGAxD,KAAKyD,SACLzD,KAAKyD,OAAOnC,SACZtB,KAAKyD,OAAS,MAGlBzD,KAAKuD,cAAclD,UAAUiB,OAAO,QACpC,MAAMkD,EAAiBxE,KAAKuD,cAAckB,QAAQ,WAAWpD,cAAc,gBAAgBX,YACrFgE,EAAW1E,KAAKuD,cAAclC,cAAc,cAAcX,YAEhEV,KAAKgE,cAAchE,KAAKuD,cAAepC,EAAE8C,QAAS9C,EAAE+C,SAEpD,MAAMS,EAAgB3E,KAAKuD,cAAckB,QAAQ,WAAWpD,cAAc,gBAAgBX,YAEpFkE,EAAOvC,EAAkBO,OAM/B,IAAIiC,EAJAD,IACA5E,KAAKuC,WAAaS,EAAWI,KAAKwB,IAKtC,IAAK,IAAIE,KAAOC,EAOZ,GANIA,EAAUD,KAASN,IACnBK,EAAa7E,KAAKuC,WAAWuC,GAAKE,WAAUC,GAAQA,IAASP,IACzDG,GAAc,GACd7E,KAAKuC,WAAWuC,GAAKI,OAAOL,EAAY,IAG5CE,EAAUD,KAASH,EAAe,CAClC,MAAMQ,EAAOnF,KAAKuD,cAAc6B,mBAAmB/D,cAAc,cAE5D8D,GAGDN,EAAa7E,KAAKuC,WAAWuC,GAAKE,WAAUC,GAAQA,IAASE,EAAKzE,cAC9DmE,GAAc,GACd7E,KAAKuC,WAAWuC,GAAKI,OAAOL,EAAY,EAAGH,IAJ/C1E,KAAKuC,WAAWuC,GAAKO,KAAKX,EAOlC,CAGJrC,EAAkBC,KAAKtC,KAAKuC,YAE5BvC,KAAKwD,eAAelC,SACpBtB,KAAKwD,eAAiB,KACtBxD,KAAKuD,cAAgB,KAErBpD,SAASmF,gBAAgBC,oBAAoB,UAAWvF,KAAK+D,WAC7D5D,SAASmF,gBAAgBC,oBAAoB,YAAavF,KAAK8D,YAAY,EAI/EF,YAAezC,IACX,GAAIA,EAAEC,OAAOf,UAAUmF,SAAS,cAC5B,OAKJ,GAFAxF,KAAKuD,cAAgBpC,EAAEC,OAAOqD,QAAQ,UAEjCzE,KAAKuD,cACN,OAGJpC,EAAEsE,iBAEF,MAAMC,EAAO1F,KAAKuD,cAAcoC,wBAChC3F,KAAK0D,cAAca,EAAIpD,EAAE8C,QAAUyB,EAAKpB,KACxCtE,KAAK0D,cAAcW,EAAIlD,EAAE+C,QAAUwB,EAAKtB,IAExC,MAAMwB,EAAYzF,SAASkB,cAAc,cACzCrB,KAAKwD,eAAiBxD,KAAKuD,cAAcsC,WAAU,GACnD7F,KAAKwD,eAAeW,MAAM2B,MAAQ9F,KAAKuD,cAAcwC,YAAc,KAEnE/F,KAAKwD,eAAenD,UAAUC,IAAI,WAClCsF,EAAUjF,YAAYX,KAAKwD,gBAC3BxD,KAAKwD,eAAeW,MAAMC,IAAMjD,EAAE+C,QAAUlE,KAAK0D,cAAcW,EAAI,KACnErE,KAAKwD,eAAeW,MAAMG,KAAOnD,EAAE8C,QAAUjE,KAAK0D,cAAca,EAAI,KAEpEvE,KAAKyD,OAASzD,KAAKuD,cAAcsC,WAAU,GAC3C7F,KAAKyD,OAAOU,MAAM6B,gBAAkB,qBACpChG,KAAKyD,OAAOU,MAAM8B,UAAY,OAC9B,IAAK,MAAMC,KAASlG,KAAKyD,OAAO0C,SAC7BD,EAAM/B,MAAMiC,QAAU,OAGzBpG,KAAKuD,cAAclD,UAAUC,IAAI,QAEjCH,SAASmF,gBAAgBe,iBAAiB,UAAWrG,KAAK+D,WAC1D5D,SAASmF,gBAAgBe,iBAAiB,YAAarG,KAAK8D,YAAY,EAG5EE,aAAAA,CAAcsC,EAAS/B,EAAGF,GACtB,IAAKiC,EACD,OAGJtG,KAAKwD,eAAenD,UAAUC,IAAI,QAElC,MAAMc,EAASjB,SAASoG,iBAAiBhC,EAAGF,GAEtCmC,EAAOpF,EAAOqD,QAAQ,SACtBhE,EAASW,EAAOqD,QAAQ,WAE9B,GAAKhE,EAAL,CAIA,GAAK+F,EAoBGnC,EAFQmC,EAAKb,wBAAwBvB,IAE3BoC,EAAKC,aAAe,EAC9BhG,EAAOiG,aAAaJ,EAASE,EAAKpB,oBAElC3E,EAAOiG,aAAaJ,EAASE,OAvB1B,CACP,IAAIG,EAAcxG,SAASoG,iBAAiBhC,EAAGF,EAAIrE,KAAK2D,UACpDiD,EAASD,EAAYlC,QAAQ,SACjC,GAAImC,EACAnG,EAAOiG,aAAaJ,EAASM,EAAOxB,wBACjC,CACH,MAAMyB,EAAapG,EAAOY,cAAc,gBACxC,GAAIsF,IAAgBE,EAAY,CAC5B,IAAIC,EAAWD,EAAWzB,mBAAmBX,QAAQ,SACjDqC,GACArG,EAAOiG,aAAaJ,EAASQ,EAErC,KAAO,CACH,MAAMC,EAAgBtG,EAAOY,cAAc,kBAC3CZ,EAAOiG,aAAaJ,EAASS,EACjC,CACJ,CACJ,CAUA/G,KAAKwD,eAAenD,UAAUiB,OAAO,OA7BrC,CA8BJ,CAEA0F,IAAAA,GAGI,OAFA7G,SAASmF,gBAAgBe,iBAAiB,YAAarG,KAAK4D,aAErD5D,IACX,GCjLQ,ICMG,MACXF,WAAAA,GACIE,KAAKiH,MAAQ,KACbjH,KAAKkH,QAAU,CAAC,EAEhBlH,KAAKuC,WAAa,IAAIS,EAEtBhD,KAAKmH,WAAanH,KAAKmH,WAAWtD,KAAK7D,KAC3C,CAEAgH,IAAAA,GACI,MAAMpB,EAAYzF,SAASkB,cAAc,cACzC,IAAI+F,EAEJ,MAAMxC,EAAOvC,EAAkBO,OAG3BwE,EADAxC,EACU5B,EAAWI,KAAKwB,GAEhByC,EAGdrH,KAAKsH,OAAO1B,EAAWwB,GACvBjH,SAASkG,iBAAiB,QAASrG,KAAKmH,YAEvB,IAAI7D,EAAetD,KAAKuC,YAChCyE,MACb,CAEAM,MAAAA,CAAO1B,EAAWwB,GACd,MAAMH,EAAQ,IAAIpH,EAAM+F,GAIxB,IAAIY,EAAM1F,EAAUyG,EAAeC,EAHnCxH,KAAKiH,MAAQA,EAAMhH,SACnB2F,EAAUjF,YAAYX,KAAKiH,OAI3B,IAAK,IAAInC,KAAOC,EACZ/E,KAAKkH,QAAQpC,GAAO,IAAIvE,EAAOwE,EAAUD,IAAM7E,SAC/CsH,EAAgB,IAAI/F,EAAYxB,KAAKkH,QAAQpC,IAC7C0C,EAAcD,EAActH,SAC5BD,KAAKiH,MAAMtG,YAAYX,KAAKkH,QAAQpC,IAEpC9E,KAAKuC,WAAWuC,GAAO,GAEvBsC,EAAQtC,GAAK2C,SAAQC,IACjBlB,EAAO,IAAI5F,EAAK8G,GAChB5G,EAAW0F,EAAKvG,SAEhBa,EAASuF,iBAAiB,aAAcG,EAAKtF,YAC7CJ,EAASuF,iBAAiB,aAAcG,EAAKjF,YAE7CvB,KAAKkH,QAAQpC,GAAK4B,aAAa5F,EAAU0G,GAEzCxH,KAAKuC,WAAWuC,GAAKO,KAAKqC,EAAK,IAGnCrF,EAAkBC,KAAKtC,KAAKuC,WAEpC,CAEA4E,WAAchG,IAEV,IAAIyD,EAEJ,GAHAzD,EAAEsE,iBAGEtE,EAAEC,OAAOf,UAAUmF,SAAS,cAAe,CAC3CZ,EAAOvC,EAAkBO,OAErBgC,IACA5E,KAAKuC,WAAaS,EAAWI,KAAKwB,IAGtC,MAAM+C,EAAexG,EAAEC,OAAOqD,QAAQ,SAChCC,EAAWiD,EAAatG,cAAc,cAAcX,YAGpDkH,EADgBzG,EAAEC,OAAOqD,QAAQ,WACCpD,cAAc,gBAAgBX,YAEtE,IAAK,IAAIoE,KAAOC,EACZ,GAAIA,EAAUD,KAAS8C,EACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI7H,KAAKuC,WAAWuC,GAAKgD,OAAQD,IACzC7H,KAAKuC,WAAWuC,GAAK+C,KAAOnD,GAC5B1E,KAAKuC,WAAWuC,GAAKI,OAAO2C,EAAG,GAM/CF,EAAarG,SACbe,EAAkBC,KAAKtC,KAAKuC,WAChC,CAUA,GARIpB,EAAEC,OAAOf,UAAUmF,SAAS,4BAC5BhE,EAAYU,UAAUf,EAAEC,OAAOqD,QAAQ,YAGvCtD,EAAEC,OAAOf,UAAUmF,SAAS,kBAC5BhE,EAAYY,OAAOjB,EAAEC,OAAOqD,QAAQ,YAGpCtD,EAAEC,OAAOf,UAAUmF,SAAS,mBAAoB,CAChDZ,EAAOvC,EAAkBO,OAErBgC,IACA5E,KAAKuC,WAAaS,EAAWI,KAAKwB,IAGtC,MAAMmD,EAAgB5G,EAAEC,OAAOqD,QAAQ,WACvC,IAAItC,EAASX,EAAYI,MAAMmG,GAE/B,GAAI5F,EAAO,CACP,MAAMyF,EAAoBG,EAAc1G,cAAc,gBAAgBX,YAChE8G,EAAcO,EAAc1G,cAAc,kBAEhD,IAAImF,EAAO,IAAI5F,EAAKuB,GAChBrB,EAAW0F,EAAKvG,SAEpBa,EAASuF,iBAAiB,aAAcG,EAAKtF,YAC7CJ,EAASuF,iBAAiB,aAAcG,EAAKjF,YAE7CwG,EAAcrB,aAAa5F,EAAU0G,GAErC,IAAK,IAAI1C,KAAOC,EACRA,EAAUD,KAAS8C,GACnB5H,KAAKuC,WAAWuC,GAAKO,KAAKlD,GAGlCE,EAAkBC,KAAKtC,KAAKuC,WAChC,CAEAf,EAAYY,OAAO2F,EACvB,KDvIJf,M","sources":["webpack://Task-DnD/./src/components/board/board.js","webpack://Task-DnD/./src/components/column/column.js","webpack://Task-DnD/./src/components/card/card.js","webpack://Task-DnD/./src/components/form/addcard.js","webpack://Task-DnD/./src/js/BoardStateService.js","webpack://Task-DnD/./src/js/BoardState.js","webpack://Task-DnD/./src/js/DragController.js","webpack://Task-DnD/./src/index.js","webpack://Task-DnD/./src/js/app.js"],"sourcesContent":["import './board.css';\n\nexport default class Board {\n    constructor(parent) {\n        this.parent = parent;\n    }\n\n    render() {\n        const boardElem = document.createElement('div');\n        boardElem.classList.add('board');\n\n        return boardElem;\n    }\n}","import './column.css';\n\nexport default class Column {\n    constructor(header) {\n        this.header = header;\n    }\n\n    render() {\n        const column = document.createElement('div');\n        column.classList.add('column');\n\n        const header = document.createElement('h2');\n        header.classList.add('column-head');\n        header.textContent = this.header;\n\n        column.appendChild(header);\n\n        return column;\n    }\n\n\n}","import './card.css';\n\nexport default class Card {\n    constructor(text) {\n        this.text = text;\n    }\n\n    render() {\n        const cardElem = document.createElement('div');\n        cardElem.classList.add('card');\n\n        const cardtext = document.createElement('p');\n        cardtext.classList.add('card-text');\n        cardtext.textContent = this.text;\n        cardElem.appendChild(cardtext);\n\n        const closeElement = document.createElement('div');\n        closeElement.classList.add('card_close', 'inactive');\n        closeElement.innerHTML = `&times;`;\n        cardElem.appendChild(closeElement);\n\n        return cardElem;\n    }\n\n    mouseEnter(e) {\n        const closeElement = e.target.querySelector('.card_close');\n        closeElement.classList.remove('inactive');\n    }\n\n    mouseLeave(e) {\n        const closeElement = e.target.querySelector('.card_close');\n        closeElement.classList.add('inactive');\n    }\n\n}","import './addcard.css';\n\nexport default class AddCardForm {\n    constructor(parent) {\n        this.parent = parent;\n    }\n\n    render() {\n        const addForm = document.createElement('form');\n        addForm.classList.add('add-card-form');\n\n        const addInput = document.createElement('textarea');\n        addInput.classList.add('add-card-input', 'inactive');\n        addInput.placeholder = 'Enter a title for this card...';\n        addForm.appendChild(addInput);\n        this.input = addInput;\n\n        const buttonsSection = document.createElement('div');\n        buttonsSection.classList.add('buttons-section', 'inactive');\n        addForm.appendChild(buttonsSection);\n        \n        const addButton = document.createElement('button');\n        addButton.classList.add('add-card-button', 'inactive');\n        addButton.type = 'button';\n        addButton.textContent = 'Add Card';\n        buttonsSection.appendChild(addButton);\n\n        const cancelButton = document.createElement('button');\n        cancelButton.classList.add('cancel-button', 'inactive');\n        cancelButton.type = 'button';\n        cancelButton.innerHTML = `&times;`\n        buttonsSection.appendChild(cancelButton);\n\n        const footer = document.createElement('button');\n        footer.classList.add('add-another-card-button');\n        footer.type = 'button';\n        footer.textContent = 'Add another card';\n        addForm.appendChild(footer);\n\n        this.parent.appendChild(addForm);\n        \n        return addForm;\n    }\n\n    static showInput(parent) {\n        const addAnotherCardButton = parent.querySelector('.add-another-card-button');\n        addAnotherCardButton.classList.add('inactive');\n        \n        const input = parent.querySelector('.add-card-input');\n        input.classList.remove('inactive');\n\n        const buttonsSection = parent.querySelector('.buttons-section');\n        buttonsSection.classList.remove('inactive');\n\n        const addCardButton = parent.querySelector('.add-card-button');\n        addCardButton.classList.remove('inactive');\n\n        const cancelButton = parent.querySelector('.cancel-button');\n        cancelButton.classList.remove('inactive');\n    }\n\n    static input(parent) {\n        return parent.querySelector('.add-card-input').value;\n    }\n\n    static cancel(parent) {\n        const addAnotherCardButton = parent.querySelector('.add-another-card-button');\n        addAnotherCardButton.classList.remove('inactive');\n        \n        const input = parent.querySelector('.add-card-input');\n        input.value = '';\n        input.classList.add('inactive');\n\n        const buttonsSection = parent.querySelector('.buttons-section');\n        buttonsSection.classList.add('inactive');\n\n        const addCardButton = parent.querySelector('.add-card-button');\n        addCardButton.classList.add('inactive');\n\n        const cancelButton = parent.querySelector('.cancel-button');\n        cancelButton.classList.add('inactive');\n    } \n}","export default class BoardStateService {\n\n    static save(boardState) {\n        localStorage.setItem('boardState', JSON.stringify(boardState));\n    }\n\n    static load() {\n        try {\n            return JSON.parse(localStorage.getItem('boardState'));\n        } catch (e) {\n            throw new Error('Invalid state');\n        }\n    }\n}","export default class BoardState {\n    constructor() {\n        this.todo = [];\n        this.inprogress = [];\n        this.done = [];\n    }\n\n    static from(object) {\n        const boardState = new BoardState();\n        boardState.todo = object.todo;\n        boardState.inprogress = object.inprogress;\n        boardState.done = object.done;\n\n        return boardState;\n    }\n}","import BoardStateService from './BoardStateService';\nimport BoardState from './BoardState';\n\nimport boardList from '../data/board-list.json';\n\nexport default class DragController {\n    constructor() {\n        this.actualElement = null;\n        this.draggedElement = null;\n        this.shadow = null;\n        this.mousePosition = {};\n        this.distance = 10;\n\n        this.boardState = new BoardState();\n\n        this.onMouseDown = this.onMouseDown.bind(this);\n        this.onMouseOver = this.onMouseOver.bind(this);\n        this.onMouseUp = this.onMouseUp.bind(this);\n    }\n\n    onMouseOver = (e) => {\n        if (!this.actualElement) {\n            return;\n        }        \n        \n        if (this.shadow) {\n            this.shadow.remove();\n        }\n\n        this.insertElement(this.shadow, e.clientX, e.clientY);\n\n        this.draggedElement.style.top = e.clientY - this.mousePosition.y + 'px';\n        this.draggedElement.style.left = e.clientX - this.mousePosition.x + 'px';\n        \n    }\n\n    onMouseUp = (e) => {\n        if (!this.draggedElement) {\n            return;\n        } \n\n        if (this.shadow) {\n            this.shadow.remove();\n            this.shadow = null;\n        }\n\n        this.actualElement.classList.remove('hide');\n        const lastColumnName = this.actualElement.closest('.column').querySelector('.column-head').textContent;\n        const cardText = this.actualElement.querySelector('.card-text').textContent;\n        \n        this.insertElement(this.actualElement, e.clientX, e.clientY);\n\n        const newColumnName = this.actualElement.closest('.column').querySelector('.column-head').textContent;\n                \n        const data = BoardStateService.load();\n\n        if (data) {\n            this.boardState = BoardState.from(data);            \n        }\n\n        let foundIndex;\n\n        for (let key in boardList) {                \n            if (boardList[key] === lastColumnName) {   \n                foundIndex = this.boardState[key].findIndex(elem => elem === cardText);                 \n                if (foundIndex > -1) {\n                    this.boardState[key].splice(foundIndex, 1);                       \n                }\n            }\n            if (boardList[key] === newColumnName) {\n                const next = this.actualElement.nextElementSibling.querySelector('.card-text');\n\n                if (!next) {\n                    this.boardState[key].push(cardText);\n                } else {\n                    foundIndex = this.boardState[key].findIndex(elem => elem === next.textContent);                 \n                    if (foundIndex > -1) {\n                        this.boardState[key].splice(foundIndex, 0, cardText);                       \n                    }                    \n                }\n            }\n        }\n        \n        BoardStateService.save(this.boardState);\n\n        this.draggedElement.remove();\n        this.draggedElement = null;\n        this.actualElement = null;\n\n        document.documentElement.removeEventListener('mouseup', this.onMouseUp);\n        document.documentElement.removeEventListener('mouseover', this.onMouseOver);\n    }\n\n\n    onMouseDown = (e) => {\n        if (e.target.classList.contains('card_close')) {\n            return;\n        }\n        \n        this.actualElement = e.target.closest('.card');\n                \n        if (!this.actualElement) {\n            return;\n        }\n\n        e.preventDefault();\n\n        const rect = this.actualElement.getBoundingClientRect(); \n        this.mousePosition.x = e.clientX - rect.left;\n        this.mousePosition.y = e.clientY - rect.top;\n\n        const container = document.querySelector('.container');\n        this.draggedElement = this.actualElement.cloneNode(true);\n        this.draggedElement.style.width = this.actualElement.clientWidth + 'px';\n        \n        this.draggedElement.classList.add('dragged');\n        container.appendChild(this.draggedElement);\n        this.draggedElement.style.top = e.clientY - this.mousePosition.y + 'px';\n        this.draggedElement.style.left = e.clientX - this.mousePosition.x + 'px';\n\n        this.shadow = this.actualElement.cloneNode(true);\n        this.shadow.style.backgroundColor = 'rgb(230, 229, 229)';\n        this.shadow.style.boxShadow = 'none';\n        for (const child of this.shadow.children) {\n           child.style.display = 'none';\n        }\n        \n        this.actualElement.classList.add('hide');\n        \n        document.documentElement.addEventListener('mouseup', this.onMouseUp);\n        document.documentElement.addEventListener('mouseover', this.onMouseOver);\n    }\n\n    insertElement(element, x, y) {\n        if (!element) {\n            return;\n        }\n\n        this.draggedElement.classList.add('hide');\n\n        const target = document.elementFromPoint(x, y);\n   \n        const card = target.closest('.card');\n        const column = target.closest('.column');\n        \n        if (!column) {\n            return;\n        }\n\n        if (!card) {\n            let currentElem = document.elementFromPoint(x, y - this.distance);\n            let cardUp = currentElem.closest('.card');\n            if (cardUp) {\n                column.insertBefore(element, cardUp.nextElementSibling);\n            } else {                \n                const columnHead = column.querySelector('.column-head');\n                if (currentElem === columnHead) {\n                    let cardDown = columnHead.nextElementSibling.closest('.card');\n                    if (cardDown) {\n                        column.insertBefore(element, cardDown);\n                    }                         \n                } else {\n                    const columnAddForm = column.querySelector('.add-card-form');\n                    column.insertBefore(element, columnAddForm);\n                }\n            }    \n        } else {\n            const top = card.getBoundingClientRect().top;\n    \n            if (y > top + card.offsetHeight / 2) {\n                column.insertBefore(element, card.nextElementSibling);\n            } else {\n                column.insertBefore(element, card);\n            }\n        }\n\n        this.draggedElement.classList.remove('hide');        \n    }\n\n    init() {\n        document.documentElement.addEventListener('mousedown', this.onMouseDown);\n\n        return this;\n    }\n}","import './css/style.css';\n\nimport App from './js/app';\n\n// localStorage.clear();\n\nconst app = new App();\napp.init();\n\n","import Board from '../components/board/board';\nimport Column from '../components/column/column';\nimport Card from '../components/card/card';\nimport AddCardForm from '../components/form/addcard';\n\nimport boardList from '../data/board-list.json';\nimport cardList from '../data/card-list.json';\n\nimport DragController from './DragController';\nimport BoardStateService from './BoardStateService';\nimport BoardState from './BoardState';\n\nexport default class App { \n    constructor() {\n        this.board = null;\n        this.columns = {};\n       \n        this.boardState = new BoardState();\n        \n        this.mouseClick = this.mouseClick.bind(this);\n    }\n\n    init() {\n        const container = document.querySelector('.container');\n        let content;\n\n        const data = BoardStateService.load();\n\n        if (data) {\n            content = BoardState.from(data);\n        } else {\n            content = cardList;\n        }\n\n        this.drawUI(container, content);\n        document.addEventListener('click', this.mouseClick);\n\n        const dragCtrl = new DragController(this.boardState);\n        dragCtrl.init();\n    }\n\n    drawUI(container, content) {\n        const board = new Board(container);\n        this.board = board.render();\n        container.appendChild(this.board);   \n\n        let card, cardElem, addCardObject, addCardForm;\n\n        for (let key in boardList) {\n            this.columns[key] = new Column(boardList[key]).render();\n            addCardObject = new AddCardForm(this.columns[key]);\n            addCardForm = addCardObject.render();\n            this.board.appendChild(this.columns[key]);\n\n            this.boardState[key] = [];\n\n            content[key].forEach(item => {\n                card = new Card(item);\n                cardElem = card.render();\n\n                cardElem.addEventListener('mouseenter', card.mouseEnter);\n                cardElem.addEventListener('mouseleave', card.mouseLeave);\n\n                this.columns[key].insertBefore(cardElem, addCardForm);\n\n                this.boardState[key].push(item);\n            })\n            \n            BoardStateService.save(this.boardState);\n        }\n    }\n\n    mouseClick = (e) => {\n        e.preventDefault();\n        let data;\n\n        if (e.target.classList.contains('card_close')) {\n            data = BoardStateService.load();\n\n            if (data) {\n                this.boardState = BoardState.from(data);\n            }\n\n            const cardToDelete = e.target.closest('.card');\n            const cardText = cardToDelete.querySelector('.card-text').textContent;\n            \n            const currentColumn = e.target.closest('.column');\n            const currentColumnName = currentColumn.querySelector('.column-head').textContent;\n                        \n            for (let key in boardList) {                \n                if (boardList[key] === currentColumnName) {                    \n                    for (let i = 0; i < this.boardState[key].length; i++) {\n                        if (this.boardState[key][i] === cardText) {\n                            this.boardState[key].splice(i, 1);                       \n                        }\n                    }\n                }\n            }\n\n            cardToDelete.remove();\n            BoardStateService.save(this.boardState);            \n        }\n\n        if (e.target.classList.contains('add-another-card-button')) {\n            AddCardForm.showInput(e.target.closest('.column'));\n        } \n\n        if (e.target.classList.contains('cancel-button')) {\n            AddCardForm.cancel(e.target.closest('.column'));\n        }    \n\n        if (e.target.classList.contains('add-card-button')) {\n            data = BoardStateService.load();\n\n            if (data) {\n                this.boardState = BoardState.from(data);\n            }\n            \n            const currentColumn = e.target.closest('.column');\n            let value =  AddCardForm.input(currentColumn);\n            \n            if (value) {    \n                const currentColumnName = currentColumn.querySelector('.column-head').textContent;\n                const addCardForm = currentColumn.querySelector('.add-card-form');\n                \n                let card = new Card(value);\n                let cardElem = card.render();\n\n                cardElem.addEventListener('mouseenter', card.mouseEnter);\n                cardElem.addEventListener('mouseleave', card.mouseLeave);\n\n                currentColumn.insertBefore(cardElem, addCardForm);\n\n                for (let key in boardList) {                \n                    if (boardList[key] === currentColumnName) {\n                        this.boardState[key].push(value);\n                    }\n                }\n                BoardStateService.save(this.boardState);\n            }\n\n            AddCardForm.cancel(currentColumn);            \n        } \n    }\n\n}"],"names":["Board","constructor","parent","this","render","boardElem","document","createElement","classList","add","Column","header","column","textContent","appendChild","Card","text","cardElem","cardtext","closeElement","innerHTML","mouseEnter","e","target","querySelector","remove","mouseLeave","AddCardForm","addForm","addInput","placeholder","input","buttonsSection","addButton","type","cancelButton","footer","showInput","value","cancel","BoardStateService","save","boardState","localStorage","setItem","JSON","stringify","load","parse","getItem","Error","BoardState","todo","inprogress","done","from","object","DragController","actualElement","draggedElement","shadow","mousePosition","distance","onMouseDown","bind","onMouseOver","onMouseUp","insertElement","clientX","clientY","style","top","y","left","x","lastColumnName","closest","cardText","newColumnName","data","foundIndex","key","boardList","findIndex","elem","splice","next","nextElementSibling","push","documentElement","removeEventListener","contains","preventDefault","rect","getBoundingClientRect","container","cloneNode","width","clientWidth","backgroundColor","boxShadow","child","children","display","addEventListener","element","elementFromPoint","card","offsetHeight","insertBefore","currentElem","cardUp","columnHead","cardDown","columnAddForm","init","board","columns","mouseClick","content","cardList","drawUI","addCardObject","addCardForm","forEach","item","cardToDelete","currentColumnName","i","length","currentColumn"],"sourceRoot":""}